name: go-build
on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Security Scan
      uses: securego/gosec@master
      with:
        # we let the report trigger content trigger a failure using the GitHub Security features.
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: results.sarif

    - name: set-up-go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: make-output-directory
      run: mkdir output

    - name: test
      run: go test -v ./... -json > output/test-report.out

    - name: cover
      run: |
        go test -race -coverpkg $(go list ./... | grep -v generated | tr '\n' ',') -coverprofile output/cover.out ./...
        go tool cover -func=output/cover.out | grep total
        go tool cover --html=output/cover.out -o output/coverage.html
    - name: vet
      run: |
        go vet ./... > output/vet.out
    - name: revive
      run: |
        go install github.com/mgechev/revive@latest
        revive -exclude generated.go -exclude models_gen.go --exclude schema.resolvers.go -formatter default ./... > output/revive.out
    - name: sonar-cloud-scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Checkout repository
      uses: actions/checkout@v3

      
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
          # list of Docker images to use as base name for tags
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
    # - name: Install cosign
    #   if: github.event_name != 'pull_request'
    #   uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
    #   with:
    #     cosign-release: 'v1.7.1'


      # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
    # - name: Sign the published Docker image
    #   if: ${{ github.event_name != 'pull_request' }}
    #   env:
    #     COSIGN_EXPERIMENTAL: "true"
    #   # This step uses the identity token to provision an ephemeral certificate
    #   # against the sigstore community Fulcio instance.
    #   run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }} --force